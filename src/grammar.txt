trace_quantifiers: FORALL TRACE_VAR DOT trace_quantifiers
    | EXISTS TRACE_VAR DOT trace_quantifiers
    | ltl_formula

ltl_formula: FORALL PROCESS_VAR DOT ltl_formula
    | FORALL PROCESS_VAR_SET DOT ltl_formula
    | EXISTS PROCESS_VAR DOT ltl_formula
    | EXISTS PROCESS_VAR_SET DOT ltl_formula
    | ALWAYS ltl_formula
    | EVENTUALLY ltl_formula 
    | ltl_formula WEAK_UNTIL ltl_formula
    | NEXT ltl_formula
    | ltl_formula OR ltl_formula
    | ltl_formula AND ltl_formula
    | NEG ltl_formula
    | LEFT_PAR ltl_formula RIGHT_PAR
    | atom

atom: PROCESS_VAR IN PROCESS_VAR_SET
    | PROCESS_VAR_SET SUBSETEQ PROCESS_VAR_SET
    | PROCESS_VAR EQUAL SUCC LEFT_PAR PROCESS_VAR RIGHT_PAR
    | parameterized_atomic_proposition

parameterized_atomic_proposition: ATOMIC_PROPOSITION "_" TRACE_VAR "[" PROCESS_VAR "]"

FORALL: "forall"
EXISTS: "exists"

TRACE_VAR: "t"/[0-9]+/ 
PROCESS_VAR: /[a-z]/
PROCESS_VAR_SET: /[A-Z]/ 

ATOMIC_PROPOSITION: /[a-z]+[0-9]*/

ALWAYS: "G"
EVENTUALLY: "F"
WEAK_UNTIL: "W"
NEXT: "X"

AND: "&"
OR: "|"
IMPLIES: "->"
IFF: "<->"
NEG: "!"

IN: "in"
SUBSETEQ: "subseteq"
SUCC: "succ"
EQUAL: "="
LEFT_PAR: "("
RIGHT_PAR: ")"

DOT: "."

%import common.WS
%ignore WS